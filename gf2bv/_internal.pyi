from typing import Literal, overload, Optional, Iterator, TypeVar, Any

T = TypeVar("T")

AffineSpaceItertor = Iterator[int]
AffineSpaceItertorSlow = Iterator[int]

class AffineSpace:
    @property
    def dimension(self) -> int: ...
    @property
    def origin(self) -> int: ...
    @property
    def basis(self) -> list[int]: ...
    def __iter__(self) -> AffineSpaceItertor | AffineSpaceItertorSlow: ...

@overload
def m4ri_solve(equations: list[int], cols: int, mode: Literal[0]) -> Optional[int]: ...
@overload
def m4ri_solve(
    equations: list[int], cols: int, mode: Literal[1]
) -> Optional[AffineSpace]: ...
def to_bits(n: int, num: int) -> tuple[int, ...]: ...
def mul_bit_quad(n: int, a: int, b: int, v: int, basis: list[int]) -> int: ...
def xor_tuple(a: tuple[int, ...], b: tuple[int, ...]) -> tuple[int, ...]: ...
def tuple_where(
    cond: tuple[Any, ...], a: tuple[T, ...] | T, b: tuple[T, ...] | T
) -> tuple[T, ...]: ...
def eqs_to_sage_mat_helper(eqs: list[int], cols: int) -> tuple[bytes, list[int]]: ...
